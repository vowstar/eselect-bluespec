# -*-eselect-*-  vim: ft=eselect
# Copyright 1999-2022 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="Manage bluespec (/usr/bin/bsc) implementations"
MAINTAINER="vowstar@gmail.com"
VERSION="1.0.0"

# find a list of bluespec targets
find_targets() {
	local f
	for f in "${EROOT}"/usr/share/bsc/*; do
		if [[ -d "${f}" ]] ; then
			echo $(basename "${f}" )
		fi
	done
}

# try to remove the bluespec symlinks
remove_symlinks() {
	rm -f "${EROOT}"/usr/bin/{bluetcl,bsc,bsc2bsv,bsv2bsc,dumpba,dumpbo,showrules,vcdcheck} &>/dev/null && \
	rm -f "${EROOT}"/usr/share/vim/vimfiles/{ftdetect,indent,syntax}/bsv.vim &>/dev/null
}

# set the bluespec symlinks
set_symlinks() {
	local target="${1}" targets
	if is_number "${target}" && [[ ${target} -ge 1 ]]; then
		targets=( $(find_targets ) )
		target=${targets[target-1]}
	fi

	local dir="${EROOT}"/usr/share/bsc

	if [[ -d "${dir}/${target}" ]] ; then
		remove_symlinks

		# it's okay if these fail
		for x in "ftdetect" "indent" "syntax"; do
			ln -s "${dir}/${target}/vimfiles/${x}/bsv.vim" \
				"${EROOT}/usr/share/vim/vimfiles/${x}/bsv.vim"
		done

		# it's not okay if these fail
		for x in "bluetcl" "bsc" "bsc2bsv" "bsv2bsc" "dumpba" "dumpbo" "showrules" "vcdcheck"; do
			if [[ ! -f "${dir}/${target}/bin/${x}" ]] ; then
				die "File ${dir}/${target}/bin/${x} does not exist"
			fi
			ln -s "${dir}/${target}/bin/${x}" \
				"${EROOT}/usr/bin/${x}" \
				|| die "Couldn't set ${target} ${EROOT}/usr/bin/${x} symlink"
		done
	else
		die -q  "Target \"${1}\" doesn't appear to be valid!"
	fi
}

### show action ###

describe_show() {
	echo "Show the current bluespec implementation"
}

do_show() {
	[[ -z "${@}" ]] || die -q "Too many parameters"

	write_list_start "Current bluespec implementation:"
	if [[ -L "${EROOT}/usr/bin/bsc" ]] ; then
		write_kv_list_entry "$(basename $(echo $(canonicalise ${EROOT}/usr/bin/bsc ) | sed "s|/bin/bsc$||"))" ""
	elif [[ -e "${EROOT}/usr/bin/bsc" ]] ; then
		write_kv_list_entry "(not a symlink)" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available bluespec implementations"
}

do_list() {
	[[ -z "${@}" ]] || die -q "Too many parameters"

	local i targets
	targets=( $(find_targets ) )
	for (( i = 0; i < ${#targets[@]}; i++ )); do
		[[ ${targets[i]} = \
			"$(basename $(echo $(canonicalise ${EROOT}/usr/bin/bsc ) | sed "s|/bin/bsc$||"))" ]] \
			&& targets[i]=$(highlight_marker "${targets[i]}")
	done
	write_list_start "Available bluespec implementations:"
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
	echo "Set a new bluespec implementation provider"
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

describe_set_parameters() {
	echo "<target>"
}

do_set() {
	if [[ -z "${1}" ]] ; then
		die -q "You didn't give me a provider name"

	elif [[ -n "${2}" ]] ; then
		die -q "Too many parameters"

	elif [[ -L "${EROOT}/usr/bin/bsc" ]] ; then
		if ! remove_symlinks ; then
			die -q "Can't remove existing provider"
		elif ! set_symlinks "${1}" ; then
			die -q "Can't set new provider"
		fi

	elif [[ -e "${EROOT}/usr/bin/bsc" ]] ; then
		die -q "Sorry, ${EROOT}/usr/bin/bsc confuses me"

	else
		set_symlinks "${1}" || die -q "Can't set a new provider"
	fi
}

### update action ###

describe_update() {
	echo "Automatically update the bluespec provider"
}

describe_update_options() {
	echo "--if-unset : Do not override existing implementation"
}

do_update() {
	[[ -z "${1}" ]] || ( [[ -z "${2}" ]] && [[ "${1}" == "--if-unset" ]] ) || \
		die -q "Usage error"

	if [[ -L "${EROOT}/usr/bin/bsc" ]]; then
		[[ ${1} == "--if-unset" ]] && return
		remove_symlinks || die -q "Can't remove existing link"
	fi
	if [[ -e "${EROOT}/usr/bin/bsc" ]]; then
		die -q "Can't set a new provider"
	elif ! [[ -z $(find_targets ) ]]; then
		set_symlinks 1 || die -q "Can't set a new provider"
	fi
}
